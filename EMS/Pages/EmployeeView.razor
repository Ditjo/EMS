@page "/employeesview"
@using EMS.Data.DataHandeling;
@using EMS.Data.MockData;
@using EMS.Models;
@using EMS.Services;

@inject NavigationManager NavigationManager;
@inject IEmployeeServices EmployeeServices;
@inject IDepartmentServices DepartmentServices;
@inject IJobTitleServices JobTitleServices;

<PageTitle>Employee Overview</PageTitle>

<h3>EmployeeView</h3>

<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateEmployee">New Employee</button>
        <button type="button" class="btn btn-primary" @onclick="DisabledEmployees">Show @buttonTitle Employees</button>
    </div>
</div>

@if (listEmployees is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DeleteEmployee Employee="@selectedEmployee" OnClose="@OnDeleteModalClose"></DeleteEmployee>

    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Id</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>Job Title</th>
                <th>Department</th>
                <th>Salary</th>
                <th>Deleted</th>
                <th>Username</th>
                <th>Password</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in listEmployees)
            {
                if (employee.Deleted == ShowDisabledEmployees)
                {
                    <tr>
                        <td>@employee.Id</td>
                        <td>@employee.FirstName</td>
                        <td>@employee.LastName</td>
                        <td>@listJobTitle.Find(x => x.Id == employee.JobTitel).JobTitleName</td>
                        <td>@listDepartment.Find(x => x.Id == employee.Department).DepartmentName</td>
                        <td>@employee.Salary</td>
                        <td>@employee.Deleted</td>
                        <td>@employee.Username</td>
                        <td>@employee.Password</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(() => EditEmployee(employee.Id))">
                                <i class="oi oi-pencil"></i>
                            </button>

                            @if (employee.Deleted == true)
                            {
                                <button class="btn btn-success" @onclick="(() => EnableDisableEmployee(employee))">
                                    <i class="oi oi-circle-check"></i>
                                </button>

                                <button class="btn btn-danger"
                                    data-bs-toggle="modal"
                                    data-bs-target="#deleteModal"
                                    @onclick="(() => selectedEmployee = employee)">
                                    <i class="oi oi-trash"></i>
                                    
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-warning" @onclick="(() => EnableDisableEmployee(employee))">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
@code {
    List<EmployeeModel> listEmployees = new();
    List<JobTitleModel> listJobTitle = new();
    List<DepartmentModel> listDepartment = new();

    private EmployeeModel? selectedEmployee;

    private string buttonTitle = "Disabled";

    private bool ShowDisabledEmployees = false;

    protected override async void OnInitialized()
    {
        //listDepartment = await DataSideTables.GetDataDepartment();
        //listJobTitle = await DataSideTables.GetDataJobTitle();

        listEmployees = await EmployeeServices.ShowEmployees();
        listDepartment = await DepartmentServices.ShowDepartments();
        listJobTitle = await JobTitleServices.ShowJobTitles();
    }

    private void DisabledEmployees()
    {
        ShowDisabledEmployees = !ShowDisabledEmployees;//Move to new method
        buttonTitle = (ShowDisabledEmployees == false) ? "Disabled" : "Enabled";

        //listEmployees = await EmployeeServices.ShowEmployees();
    }

    private void CreateEmployee()
    {
        NavigationManager.NavigateTo("/employee");
    }

    private void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employee/{id}");
    }

    private void EnableDisableEmployee(EmployeeModel employee)
    {

        employee.Deleted = !employee.Deleted;
        EmployeeServices.UpdateEmployee(employee);
        //listEmployees = await EmployeeServices.ShowEmployees();
    }

    private void OnDeleteModalClose(bool accepted)
    {
        if (accepted)
        {
            EmployeeServices.DeleteEmployee(selectedEmployee!.Id);
            //listEmployees = await EmployeeServices.ShowEmployees();
        }
    }

}
