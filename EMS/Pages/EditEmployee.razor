@page "/employee"
@page "/employee/{id:int}"
@using EMS.Data.DataHandeling;
@using EMS.Data.MockData;
@using EMS.Models;
@inject NavigationManager NavigationManager

<h3>EditEmployee</h3>

<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@_employee" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="mb-3">
                <label for="firstname" class="form-label">Firstname: </label>
                <InputText id="firstname" @bind-Value="_employee.FirstName" class="form-control"></InputText>
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">Lastname: </label>
                <InputText id="lastname" @bind-Value="_employee.LastName" class="form-control"></InputText>
            </div>
            <div class="mb-3">
                <label for="jobtitle" class="form-label">Job Title: </label>
                <InputSelect id="jobtitle" @bind-Value="_employee.JobTitel" class="form-select">
                    <option value="">Select Title</option>
                    @foreach (var item in ListJobTitle)
                    {
                        <option value="@item.Id">@item.JobTitleName</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="department" class="form-label">Department: </label>
                <InputSelect id="department" @bind-Value="_employee.Department" class="form-select">
                    <option value="">Select Department</option>
                    @foreach (var item in ListDepartment)
                    {
                        <option value="@item.Id">@item.DepartmentName</option>
                    }

                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="salary" class="form-label">Salary: </label>
                <InputNumber id="salary" @bind-Value="_employee.Salary" class="form-control"></InputNumber>
            </div>
            <div class="mb-3">
                <label for="deleted" class="form-label">Deleted: </label>
                <InputCheckbox id="deleted" @bind-Value="_employee.Deleted" class="form-control"></InputCheckbox>
            </div>
            <div class="mb-3">
                <label for="username" class="form-label">Username: </label>
                <InputText id="username" @bind-Value="_employee.Username" class="form-control"></InputText>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password: </label>
                <InputText id="password" @bind-Value="_employee.Password" class="form-control"></InputText>
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private EmployeeModel? _employee;

    List<JobTitleModel> ListJobTitle = new();
    List<DepartmentModel> ListDepartment = new();
    List<EmployeeModel> ListEmployee = new();

    DataEmployeeMock dataEmployee = new();

    protected override async void OnInitialized()
    {
        ListDepartment = await DataSideTables.GetDataDepartment();
        ListJobTitle = await DataSideTables.GetDataJobTitle();
        ListEmployee = await dataEmployee.GetAllEmployees();
    }

    protected override void OnParametersSet()
    {
        if(Id is not null)
        {
            EmployeeModel SelectedEmployee = dataEmployee.GetEmployee(Id.Value, ListEmployee);
            _employee = new()
                {
                    Id = SelectedEmployee.Id,
                    FirstName = SelectedEmployee.FirstName,
                    LastName = SelectedEmployee.LastName,
                    JobTitel = SelectedEmployee.JobTitel,
                    Department = SelectedEmployee.Department,
                    Salary = SelectedEmployee.Salary,
                    Deleted = SelectedEmployee.Deleted,
                    Username = SelectedEmployee.Username,
                    Password = SelectedEmployee.Password
                };
        }
        else
        {
            _employee = new();            
        }
    }

    private void HandleSubmit()
    {
        if (_employee!.Id == 0)
        {
            dataEmployee.AddNewEmployee(_employee);
        }
        else
        {
            dataEmployee.UpdateEmployee(_employee);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
